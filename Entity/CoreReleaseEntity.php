<?php
/**
 * Copyright Zikula Foundation 2014 - Zikula Application Framework
 *
 * This work is contributed to the Zikula Foundation under one or more
 * Contributor Agreements and licensed to You under the following license:
 *
 * @license MIT
 *
 * Please see the NOTICE file distributed with this source code for further
 * information regarding copyright and licensing.
 */

namespace Zikula\Module\CoreManagerModule\Entity;

use Zikula\Core\Doctrine\EntityAccess;
use Doctrine\ORM\Mapping as ORM;

/**
 * Core version
 * @ORM\Entity(repositoryClass="Zikula\Module\CoreManagerModule\Entity\Repository\CoreReleaseRepository")
 * @ORM\Table(name="coremanager_releases")
 */
class CoreReleaseEntity extends EntityAccess
{
    const STATE_SUPPORTED = 1;

    const STATE_OUTDATED = 2;

    const STATE_PRERELEASE = 3;

    const STATE_DEVELOPMENT = 4;

    const NEWS_DESCRIPTION_START = "<!-- %START_AUTOGENERATED% Do not touch the content below! If you want to change it, edit the release at GitHub! -->";

    const NEWS_DESCRIPTION_END = "<!-- You can edit content below this line %END_AUTOGENERATED% -->";

    /**
     * Id field - NOT autogenerated.
     *
     * In case of a release from -GitHub, the (numeric) GitHub release id is used.
     * In case of a "release" from jenkins, the job name + build number are used.
     *
     * @ORM\Id
     * @ORM\Column(type="string")
     * @ORM\GeneratedValue(strategy="NONE")
     * @var string
     */
    private $id;

    /**
     * Core version (semver)
     *
     * @ORM\Column(type="string", length=10)
     * @var string
     */
    private $semver = '';

    /**
     * Release name.
     *
     * @ORM\Column(type="string", length=255)
     * @var string
     */
    private $name = '';

    /**
     * Array of release names indexed by locale.
     * @var array
     */
    private $namesI18n = array();

    /**
     * Release description.
     *
     * @ORM\Column(type="text")
     * @var string
     */
    private $description = '';

    /**
     * Array of release descriptions indexed by locale.
     * @var array
     */
    private $descriptionsI18n = array();

    /**
     * Core state (supported, outdated, prerelease, development)
     *
     * @ORM\Column(type="integer")
     * @var int
     */
    private $state;

    /**
     * Core assets.
     *
     * @ORM\Column(type="array")
     * @var array
     */
    private $assets;

    /**
     * Source code download urls.
     *
     * @ORM\Column(type="array")
     * @var array
     */
    private $sourceUrls;

    /**
     * @ORM\Column(type="integer", nullable=true)
     * @var int
     */
    private $news_id;

    public function __construct($id)
    {
        $this->id = (string)$id;
    }

    /**
     * @param array $assets
     */
    public function setAssets($assets)
    {
        $this->assets = $assets;
    }

    /**
     * @return array
     */
    public function getAssets()
    {
        return $this->assets;
    }

    /**
     * @param int $id
     */
    public function setId($id)
    {
        $this->id = (string)$id;
    }

    /**
     * @return int
     */
    public function getId()
    {
        return $this->id;
    }

    /**
     * @param string $semver
     */
    public function setSemver($semver)
    {
        $this->semver = $semver;
    }

    /**
     * @return string
     */
    public function getSemver()
    {
        return $this->semver;
    }

    /**
     * @param array $sourceUrls
     */
    public function setSourceUrls($sourceUrls)
    {
        $this->sourceUrls = $sourceUrls;
    }

    /**
     * @return array
     */
    public function getSourceUrls()
    {
        return $this->sourceUrls;
    }

    /**
     * @param int $state
     */
    public function setState($state)
    {
        $this->state = $state;
    }

    /**
     * @return int
     */
    public function getState()
    {
        return $this->state;
    }

    /**
     * @param string $description
     */
    public function setDescription($description)
    {
        $this->description = $description;
    }

    /**
     * @return string
     */
    public function getDescription()
    {
        return $this->description;
    }

    /**
     * Get the release description in the user's or given language. Defaults to English.
     *
     * @param string $lang The language to use (default: user's language)
     *
     * @return string
     */
    public function getDescriptionI18n($lang = 'en')
    {
        $this->extractI18n();

        if (isset($this->descriptionsI18n[$lang])) {
            return $this->descriptionsI18n[$lang];
        }

        return $this->descriptionsI18n['en'];
    }

    /**
     * @param string $name
     */
    public function setName($name)
    {
        $this->name = $name;
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }

    /**
     * Get the release name in the user's or given language. Defaults to English.
     *
     * @param string $lang The language to use (default: user's language)
     *
     * @return string
     */
    public function getNameI18n($lang = 'en')
    {
        $this->extractI18n();

        if (isset($this->namesI18n[$lang])) {
            return $this->namesI18n[$lang];
        }

        return $this->namesI18n['en'];
    }

    /**
     * Extracts the multilingual names and descriptions.
     */
    private function extractI18n()
    {
        if (count($this->namesI18n) > 0) {
            // Already extracted.
            return;
        }

        $tmpArr = preg_split('/<h1>(\s*)(.*?){2,5}:(.*)<\/h1>/', $this->description, -1, PREG_SPLIT_DELIM_CAPTURE | PREG_SPLIT_NO_EMPTY);
        if (count($tmpArr) == 0) {
            $tmpArr[] = '';
        }
        array_unshift($tmpArr, $this->name);
        array_unshift($tmpArr, 'en');

        for ($i = 0; $i < count($tmpArr); $i += 3) {
            $this->descriptionsI18n[$tmpArr[$i]] = $tmpArr[$i + 2];
            $this->namesI18n[$tmpArr[$i]] = $tmpArr[$i + 1];
        }
    }

    /**
     * @return int
     */
    public function getNewsId()
    {
        return $this->news_id;
    }

    /**
     * @param int $news_id
     */
    public function setNewsId($news_id)
    {
        $this->news_id = $news_id;
    }

    public function toArray()
    {
        $data = parent::toArray();

        $this->extractI18n();
        $data['namesI18n'] = $this->namesI18n;
        $data['descriptionsI18n'] = $this->descriptionsI18n;

        return $data;
    }
}
